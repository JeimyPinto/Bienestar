```yaml
openapi: 3.0.0
info:
  title: Bienestar API
  version: 1.0.0
  description: Documentación de la API para gestión de usuarios

paths:
  /api:
    get:
      summary: Bienvenida a la API de Bienestar
      tags:
        - General
      responses:
        '200':
          description: Mensaje de bienvenida
          content:
            application/json:
              example:
                message: Bienvenido a la API de Bienestar. Este endpoint es solo para pruebas de verificación de conexión a la API.
                environment: development
  /uploads/{filename}:
    get:
      summary: Obtener archivos estáticos subidos
      description: Devuelve un archivo estático previamente subido (por ejemplo, imágenes de usuario).
      tags:
        - Archivos
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
          description: Nombre del archivo a recuperar
      responses:
        '200':
          description: Archivo encontrado y devuelto correctamente
        '404':
          description: Archivo no encontrado
  /users:
    get:
      summary: Obtiene todos los usuarios (solo ADMIN, SUPERADMIN o INSTRUCTOR)
      tags:
        - Users
      security:
        - bearerAuth: []
      description: Retorna todos los usuarios registrados. Solo accesible para usuarios con rol ADMIN, SUPERADMIN o INSTRUCTOR.
      responses:
        '200':
          description: Lista de todos los usuarios obtenida correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuarios obtenidos correctamente
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '404':
          description: No hay usuarios registrados
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No hay usuarios registrados
                  users:
                    type: array
                    items: {}
        '401':
          description: No autorizado
        '403':
          description: Prohibido (rol insuficiente)
    post:
      summary: Crear un nuevo usuario
      description: Solo accesible para ADMIN o SUPERADMIN. Permite subir un archivo (ejemplo: foto de perfil) junto con los datos del usuario.
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Archivo a subir (ejemplo: foto de perfil)
                nombre:
                  type: string
                email:
                  type: string
                password:
                  type: string
                # ...otros campos necesarios...
              required:
                - nombre
                - email
                - password
      responses:
        '201':
          description: Usuario creado exitosamente
        '400':
          description: Datos inválidos
        '401':
          description: No autorizado
        '403':
          description: Prohibido (rol insuficiente)
  /auth/login:
    post:
      summary: Iniciar sesión de usuario
      tags:
        - Authentication
      description: Permite a un usuario iniciar sesión proporcionando su correo electrónico, contraseña y un token de ReCAPTCHA. Si las credenciales son válidas, se devuelve un token de autenticación.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Inicio de sesión exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Inicio de sesión exitoso para el usuario Juan. Hora de inicio de sesión: 10:30:00"
                  token:
                    type: string
                    nullable: true
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Error de validación de datos o reCAPTCHA inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation Error / Error de Validación"
                  details:
                    oneOf:
                      - type: array
                        items:
                          type: object
                          properties:
                            message:
                              type: string
                              example: "El campo email es requerido"
                            field:
                              type: string
                              example: "email"
                            code:
                              type: string
                              example: "invalid_type"
                            received:
                              type: string
                              nullable: true
                            expected:
                              type: string
                              nullable: true
                      - type: object
                        properties:
                          field:
                            type: string
                            example: "recaptchaToken"
        '401':
          description: Credenciales incorrectas
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Correo electrónico o contraseña incorrectos"
                  details:
                    type: object
                    properties:
                      field:
                        type: string
                        example: "email"
        '500':
          description: Error interno del servidor o de base de datos
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error interno del servidor"
                  details:
                    type: string
                    nullable: true
                    example: null
  /users/active:
    get:
      summary: Obtiene todos los usuarios activos
      tags:
        - Users
      description: Retorna todos los usuarios con estado "activo".
      responses:
        '200':
          description: Lista de usuarios activos obtenida correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuarios activos obtenidos correctamente / Active users retrieved successfully
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '404':
          description: No hay usuarios activos registrados
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No hay usuarios activos registrados
                  users:
                    type: array
                    items: {}
        '401':
          description: No autorizado
  /users/paginated:
    get:
      summary: Obtiene usuarios paginados
      tags:
        - Users
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Número de página
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Cantidad de usuarios por página
      responses:
        '200':
          description: Lista paginada de usuarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuarios obtenidos correctamente / Users retrieved successfully
                  error:
                    type: string
                    nullable: true
                    example: null
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 5
                  totalUsers:
                    type: integer
                    example: 50
        '500':
          description: Error del servidor al recuperar los usuarios paginados
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    nullable: true
                    example: null
                  error:
                    type: string
                    example: Error al obtener los usuarios / Error retrieving users
                  users:
                    type: string
                    nullable: true
                    example: null
  /users/{id}:
    get:
      summary: Obtiene un usuario por ID, incluyendo sus servicios y solicitudes
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID del usuario a consultar
      responses:
        '200':
          description: Usuario encontrado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuario obtenido correctamente / User retrieved successfully
                  error:
                    type: string
                    nullable: true
                  user:
                    $ref: '#/components/schemas/User'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    nullable: true
                  error:
                    type: string
                    example: Usuario no encontrado / User not found
                  user:
                    type: string
                    nullable: true
        '500':
          description: Error del servidor al obtener el usuario
    put:
      summary: Actualiza un usuario
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID del usuario
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Imagen de perfil del usuario (opcional)
                firstName:
                  type: string
                lastName:
                  type: string
                documentType:
                  type: string
                documentNumber:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                password:
                  type: string
                  description: Si se envía, se actualizará la contraseña
                role:
                  type: string
                  description: Solo administradores pueden cambiar el rol
      responses:
        '200':
          description: Usuario actualizado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuario actualizado correctamente por admin / User updated successfully by admin
                  error:
                    type: string
                    nullable: true
                    example: null
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Error de validación en los datos enviados
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    nullable: true
                    example: null
                  error:
                    type: string
                    example: Error de validación / Validation error
                  user:
                    type: string
                    nullable: true
                    example: null
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    nullable: true
                    example: null
                  error:
                    type: string
                    example: Usuario no encontrado / User not found
        '500':
          description: Error interno al actualizar el usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    nullable: true
                    example: null
                  error:
                    type: string
                    example: Error al actualizar el usuario / Error updating user
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - firstName
        - lastName
        - email
        - status
        - role
        - image
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        documentType:
          type: string
        documentNumber:
          type: string
        phone:
          type: string
        email:
          type: string
        password:
          type: string
        status:
          type: string
        role:
          type: string
        image:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        requests:
          type: array
          items:
            $ref: '#/components/schemas/Request'
      example:
        id: 1
        firstName: John
        lastName: Doe
        documentType: CC
        documentNumber: "123456789"
        phone: "3001234567"
        email: example@gmail.com
        password: "$2b$10$hash"
        status: activo
        role: user
        image: "https://example.com/image.jpg"
        createdAt: "2023-01-01T00:00:00Z"
        updatedAt: "2023-01-01T00:00:00Z"
        services: []
        requests: []
    LoginRequest:
      type: object
      required:
        - email
        - password
        - recaptchaToken
      properties:
        email:
          type: string
          format: email
          example: usuario@ejemplo.com
        password:
          type: string
          example: contraseña123
        recaptchaToken:
          type: string
          example: "recaptcha-token-ejemplo"
    # Puedes definir Service y Request aquí si lo necesitas
    # Service:
    #   type: object
    #   properties: {}
    # Request:
    #   type: object
    #   properties: {}
```